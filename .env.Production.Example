# =============================================
# .env.production.example
# Template for PRODUCTION deployment (per-customer) using:
# React (TypeScript) + Node.js (Express, TypeScript) + Prisma + Supabase Postgres
# Copy to the server, rename to `.env`, and REPLACE all placeholders with real values.
# =============================================

# ===== Runtime =====
# Standard Node runtime flags
NODE_ENV=production
PORT=8080
LOG_LEVEL=info

# ===== Frontend <-> Backend =====
# The allowed origin for CORS and the client base URL for API calls.
# Replace domains per customer deployment.
CORS_ORIGIN=https://customer.app.example.com
VITE_API_BASE_URL=https://api.customer.example.com

# ===== Auth (Application-level JWTs — NOT Supabase keys) =====
# Use long, random, secret values (>= 64 characters). Rotate regularly.
JWT_SECRET=REPLACE_WITH_STRONG_RANDOM_KEY
REFRESH_SECRET=REPLACE_WITH_STRONG_RANDOM_KEY
# Token lifetimes (adjust to org policy)
ACCESS_TOKEN_TTL=15m
REFRESH_TOKEN_TTL=7d

# ===== Supabase Project Identifiers =====
# Found in: Supabase Dashboard → Project Settings → API
# WARNING: SERVICE ROLE HAS FULL ACCESS. Keep it ONLY on the backend and out of Git.
SUPABASE_URL=https://<project-ref>.supabase.co
SUPABASE_ANON_KEY=sbp_anon_REPLACE_ME
SUPABASE_SERVICE_ROLE_KEY=sbp_service_role_REPLACE_ME

# ===== Supabase Postgres (Customer's dedicated DB) =====
# Found in: Supabase Dashboard → Project Settings → Database → Connection Info
# NOTE: Each customer/deployment should have its own dedicated credentials.
SUPABASE_DB_HOST=<project-ref>.supabase.co
SUPABASE_DB_PORT=5432
SUPABASE_DB_NAME=postgres
SUPABASE_DB_USER=postgres
SUPABASE_DB_PASSWORD=REPLACE_WITH_DB_PASSWORD
# PgBouncer port for pooled connections:
SUPABASE_DB_POOLER_PORT=6543

# ===== Prisma Connection Strings =====
# Prisma/Node should use SSL with Supabase.
# Choose ONE final connection string via DATABASE_URL_ACTUAL.
#
# Direct connection (not recommended for serverless; OK for containers/VMs):
DATABASE_URL=postgresql://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@${SUPABASE_DB_HOST}:${SUPABASE_DB_PORT}/${SUPABASE_DB_NAME}?schema=public&sslmode=require
#
# Via PgBouncer (RECOMMENDED for Prisma in production):
DATABASE_URL_PGBOUNCER=postgresql://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@${SUPABASE_DB_HOST}:${SUPABASE_DB_POOLER_PORT}/${SUPABASE_DB_NAME}?schema=public&pgbouncer=true&connection_limit=1&sslmode=require
#
# Final URL chosen by the backend app (pick one; PgBouncer preferred):
DATABASE_URL_ACTUAL=${DATABASE_URL_PGBOUNCER}

# ===== Optional: Email/SMTP (if the app sends emails) =====
# SMTP_HOST=smtp.example.com
# SMTP_PORT=587
# SMTP_USER=REPLACE_ME
# SMTP_PASSWORD=REPLACE_ME
# SMTP_SECURE=false
# SMTP_FROM="Projector <no-reply@customer.example.com>"

# =============================================
# --- PRODUCTION USAGE NOTES ---
# 1) FILE NAME & LOCATION:
#    - Keep this template in Git as `.env.production.example` (safe placeholders only).
#    - On the production server/container: copy and rename to `.env` in the project ROOT
#      (same folder as package.json), then replace all REPLACE_ME placeholders.
# 2) SECRETS & SECURITY:
#    - Do NOT commit real secrets to Git. Ensure `.env` is in .gitignore.
#    - Keep SUPABASE_SERVICE_ROLE_KEY backend-only. Never expose it to the frontend.
#    - Use `sslmode=require` for all DB connections to Supabase.
# 3) PRISMA:
#    - Configure Prisma to read `DATABASE_URL_ACTUAL`.
#    - For PgBouncer, keep `connection_limit=1` and `pgbouncer=true`.
# 4) MULTI-CUSTOMER:
#    - Duplicate this file per customer. Each deployment has its own DB creds.
# 5) ROTATION:
#    - Rotate JWT secrets, DB password, and Supabase keys if exposed or periodically.
# =============================================
